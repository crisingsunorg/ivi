import { AttributeDirective } from "../vdom/attribute_directive";

/* tslint:disable:max-line-length no-empty-interface */

export declare interface ElementAttrs {
  /**
   * The id global attribute defines a unique identifier (ID) which must be unique in the whole document. Its purpose
   * is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id}
   */
  id?: string | number;
  /**
   * innerHTML attribute is disabled, unsafeHTML attribute is used to assign innerHTML.
   *
   * @example
   *
   *   const n = div("", { unsafeHTML: UNSAFE_HTML("<span></span>") });
   */
  innerHTML?: never;
  /**
   * unsafeHTML attribute is used to assign innerHTML.
   *
   * @example
   *
   *   const n = div("", { unsafeHTML: UNSAFE_HTML("<span></span>") });
   */
  unsafeHTML?: AttributeDirective<string>;
  /**
   * Provides a way to direct a user to a specific field when element is instantiated. This can provide both direction
   * and convenience for a user, reducing the need to click or tab to a field.
   *
   * @example
   *
   *   const n = input("", { autofocus: AUTOFOCUS(true) });
   */
  autofocus?: AttributeDirective<boolean>;

  [key: string]: string | number | boolean | AttributeDirective<any> | undefined;
}

export declare interface HTMLElementAttrs extends ElementAttrs {
  /**
   * The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The
   * attribute value must consist of a single printable character (which includes accented and other characters that
   * can be generated by the keyboard).
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey}
   */
  accesskey?: string;
  /**
   * The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is
   * automatically capitalized as it is entered/edited by the user. The attribute must take one of the following values:
   * - "off" or "none": No autocapitalization is applied (all letters default to lowercase)
   * - "on" or "sentences": The first letter of each sentence defaults to a capital letter; all other letters default to
   *  lowercase
   * - "words": The first letter of each word defaults to a capital letter; all other letters default to lowercase
   * - "characters": All letters should default to uppercase
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize}
   */
  autocapitalize?: string;
  /**
   * The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by
   * the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following
   * values:
   *
   * - "true"
   * - "false"
   * - "plaintext-only"
   * - "events"
   * - "caret"
   * - "typing"
   * - "inherit"
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable}
   */
  contenteditable?: string;
  /**
   * The dir global attribute is an enumerated attribute indicates the directionality of the element's text. It can
   * have the following values:
   *
   * - "ltr"
   * - "rtl"
   * - "auto"
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir}
   */
  dir?: string;
  /**
   * The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, using
   * the HTML Drag and Drop API. It can have the following values:
   *
   * - "true"
   * - "false"
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable}
   */
  draggable?: string;
  /**
   * The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer,
   * relevant. For example, it can be used to hide elements of the page that can't be used until the login process has
   * been completed. Browsers won't render elements with the hidden attribute set.
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden}
   */
  hidden?: boolean;
  /**
   * The lang global attribute helps define the language of an element: the language that non-editable elements are
   * written in, or the language that the editable elements should be written in by the user.
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang}
   */
  lang?: string;
  /**
   * The spellcheck global attribute is an enumerated attribute defines whether the element may be checked for spelling
   * errors. It may have the following values:
   *
   * - "true"
   * - "false"
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck}
   */
  spellcheck?: boolean;
  /**
   * The tabindex global attribute indicates if its element can be focused, and if/where it participates in sequential
   * keyboard navigation (usually with the Tab key, hence the name).
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex}
   */
  tabIndex?: string | number;
  /**
   * The title global attribute contains text representing advisory information, related to the element it belongs to.
   *
   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title}
   */
  title?: string;
}

export declare interface HTMLAnchorElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  charset?: string;
  /**
   * Sets or retrieves the coordinates of the object.
   */
  coords?: string;
  download?: string;
  /**
   * Sets or retrieves a destination URL or an anchor point.
   */
  href?: string;
  /**
   * Sets or retrieves the language code of the object.
   */
  hreflang?: string;
  /**
   * Sets or retrieves the shape of the object.
   */
  name?: string;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  rel?: string;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  rev?: string;
  /**
   * Sets or retrieves the shape of the object.
   */
  shape?: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target?: string;
  /**
   * Retrieves or sets the text of the object as a string.
   */
  text?: string;
  type?: string;
  urn?: string;
}

export declare interface HTMLAreaElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  alt?: string;
  /**
   * Sets or retrieves the coordinates of the object.
   */
  coords?: string;
  download?: string;
  /**
   * Sets or retrieves a destination URL or an anchor point.
   */
  href?: string;
  /**
   * Sets or gets whether clicks in this region cause action.
   */
  noHref?: boolean;
  rel?: string;
  /**
   * Sets or retrieves the shape of the object.
   */
  shape?: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target?: string;
}

export declare interface HTMLMediaElementAttrs extends HTMLElementAttrs {
  /**
   * Gets or sets a value that indicates whether to start playing the media automatically.
   */
  autoplay?: boolean;
  /**
   * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the
   * developer does not include controls for the player).
   */
  controls?: boolean;
  crossOrigin?: string;
  /**
   * Gets or sets the current playback position, in seconds.
   */
  currentTime?: number;
  defaultMuted?: boolean;
  /**
   * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio
   * resource.
   */
  defaultPlaybackRate?: number;
  /**
   * Gets or sets a flag to specify whether playback should restart after it completes.
   */
  loop?: boolean;
  /**
   * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
   */
  muted?: boolean;
  /**
   * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple
   * of the normal speed of the media resource.
   */
  playbackRate?: number;
  /**
   * Gets or sets the current playback position, in seconds.
   */
  preload?: string;
  readyState?: number;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src?: string;
  /**
   * Gets or sets the volume level for audio portions of the media element.
   */
  volume?: number;
}

export declare interface HTMLAudioElementAttrs extends HTMLMediaElementAttrs {
}

export declare interface HTMLBaseElementAttrs extends HTMLElementAttrs {
  /**
   * Gets or sets the baseline URL on which relative links are based.
   */
  href?: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target?: string;
}

export declare interface HTMLQuoteElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves reference information about the object.
   */
  cite?: string;
}

export declare interface HTMLBodyElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLBRElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is
   * inserted into the document.
   */
  clear?: string;
}

export declare interface HTMLButtonElementAttrs extends HTMLElementAttrs {
  disabled?: boolean;
  /**
   * Overrides the action attribute (where the data on a form is sent) on the parent form element.
   */
  formaction?: string;
  /**
   * Used to override the encoding (formEnctype attribute) specified on the form element.
   */
  formenctype?: string;
  /**
   * Overrides the submit method attribute previously specified on a form element.
   */
  formmethod?: string;
  /**
   * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without
   * validation. This can be used to create a "save draft"-type submit option.
   */
  formnovalidate?: string;
  /**
   * Overrides the target attribute on a form element.
   */
  formtarget?: string;
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
  /**
   * Gets the classification and default behavior of the button.
   */
  type?: string;
  /**
   * Sets or retrieves the default or selected value of the control.
   */
  value?: string;
}

export declare interface HTMLCanvasElementAttrs extends HTMLElementAttrs {
  /**
   * Gets or sets the height of a canvas element on a document.
   */
  height?: number;
  /**
   * Gets or sets the width of a canvas element on a document.
   */
  width?: number;
}

export declare interface HTMLTableCaptionElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLTableColElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the number of columns in the group.
   */
  span?: number;
}

export declare interface HTMLModElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves reference information about the object.
   */
  cite?: string;
  /**
   * Sets or retrieves the date and time of a modification to the object.
   */
  dateTime?: string;
}

export declare interface HTMLDivElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLDListElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLFieldSetElementAttrs extends HTMLElementAttrs {
  disabled?: boolean;
}

export declare interface HTMLFormElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing
   * the form.
   */
  "accept-charset"?: string;
  /**
   * Sets or retrieves the URL to which the form content is sent for processing.
   */
  action?: string;
  /**
   * Specifies whether autocomplete is applied to an editable text field.
   */
  autocomplete?: string;
  /**
   * Sets or retrieves the encoding type for the form.
   */
  enctype?: string;
  /**
   * Sets or retrieves how to send the form data to the server.
   */
  method?: string;
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
  /**
   * Designates a form that is not validated when submitted.
   */
  novalidate?: boolean;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target?: string;
}

export declare interface HTMLHeadingElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLHeadElementAttrs extends HTMLElementAttrs {
  profile?: string;
}

export declare interface HTMLHRElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLHtmlElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLIFrameElementAttrs extends HTMLElementAttrs {
  /**
   * This attribute can be set to true if the frame is allowed to be placed into full screen mode by calling its
   * `requestFullscreen()` method. If this isn't set, the element can't be placed into full screen mode.
   */
  allowfullscreen?: boolean;
  /**
   * This attribute can be set to true if the contents of a cross-origin <iframe> should be allowed to invoke the
   * Payment Request API.
   */
  allowpaymentrequest?: boolean;
  /**
   * Sets or retrieves the height of the object.
   */
  height?: string;
  /**
   * Sets or retrieves the frame name.
   */
  name?: string;
  /**
   * Sets or retrieves whether the user can resize the frame.
   */
  noresize?: boolean;
  /**
   * A string indicating which referrer to use when fetching the resource.
   */
  referrerpolicy?: string;
  /**
   * If specified as an empty string, this attribute enables extra restrictions on the content that can appear in the
   * inline frame. The value of the attribute can either be an empty string (all the restrictions are applied), or a
   * space-separated list of tokens that lift particular restrictions.
   */
  sandbox?: string;
  /**
   * Sets or retrieves whether the frame can be scrolled.
   */
  scrolling?: string;
  /**
   * Sets or retrieves a URL to be loaded by the object.
   */
  src?: string;
  /**
   * The content of the page that the embedded context is to contain. This attribute is expected to generally be used
   * together with the sandbox attribute. If a browser supports the srcdoc attribute, it will override the content
   * specified in the src attribute (if present). If a browser does not support the srcdoc attribute, it will show the
   * file specified in the src attribute instead (if present). Note that if the content of the attribute contains a
   * script tag then a closing script tag is required for the script to run, even if nothing else comes after the
   * script.
   */
  srcdoc?: string;
  /**
   * Sets or retrieves the width of the object.
   */
  width?: string;
}

export declare interface HTMLImageElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  alt?: string;
  /**
   * This enumerated attribute indicates if the fetching of the related image must be done using CORS or not.
   * CORS-enabled images can be reused in the <canvas> element without being "tainted."
   */
  crossorigin?: string;
  /**
   * Sets or retrieves the height of the object.
   */
  height?: number;
  /**
   * Sets or retrieves whether the image is a server-side image map.
   */
  ismap?: boolean;
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
  /**
   * A list of one or more strings separated by commas indicating a set of source sizes.
   */
  sizes?: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src?: string;
  /**
   * A list of one or more strings separated by commas indicating a set of possible image sources for the user agent to
   * use.
   */
  srcset?: string;
  /**
   * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
   */
  usemap?: string;
  /**
   * Sets or retrieves the width of the object.
   */
  width?: number;
}

export declare interface HTMLInputElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves a comma-separated list of content types.
   */
  accept?: string;
  /**
   * Sets or retrieves a text alternative to the graphic.
   */
  alt?: string;
  /**
   * Specifies whether autocomplete is applied to an editable text field.
   */
  autocomplete?: string;
  /**
   * Sets or retrieves the state of the check box or radio button.
   */
  defaultChecked?: boolean;
  /**
   * Sets or retrieves the initial contents of the object.
   */
  defaultValue?: string;
  /**
   * This Boolean attribute indicates that the form control is not available for interaction. In particular, the click
   * event will not be dispatched on disabled controls. Also, a disabled control's value isn't submitted with the form.
   */
  disabled?: boolean;
  /**
   * Overrides the action attribute (where the data on a form is sent) on the parent form element.
   */
  formaction?: string;
  /**
   * Used to override the encoding (formEnctype attribute) specified on the form element.
   */
  formenctype?: string;
  /**
   * Overrides the submit method attribute previously specified on a form element.
   */
  formmethod?: string;
  /**
   * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without
   * validation. This can be used to create a "save draft"-type submit option.
   */
  formnovalidate?: string;
  /**
   * Overrides the target attribute on a form element.
   */
  formtarget?: string;
  /**
   * Sets or retrieves the height of the object.
   */
  height?: string;
  /**
   * A hint to the browser for which virtual keyboard to display. This attribute applies when the value of the type
   * attribute is text, password, email, or url.
   */
  inputmode?: string;
  /**
   * Defines the maximum acceptable value for an input element with type="number".When used with the min and step
   * attributes, lets you control the range and increment (such as only even numbers) that the user can enter into
   * an input field.
   */
  max?: string;
  /**
   * Sets or retrieves the maximum number of characters that the user can enter in a text control.
   */
  maxlength?: number;
  /**
   * Defines the minimum acceptable value for an input element with type="number". When used with the max and step
   * attributes, lets you control the range and increment (such as even numbers only) that the user can enter into
   * an input field.
   */
  min?: string;
  /**
   * Sets or retrieves the minimum number of characters that the user can enter in a text control.
   */
  minlength?: number;
  /**
   * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
   */
  multiple?: boolean;
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
  /**
   * Gets or sets a string containing a regular expression that the user's input must match.
   */
  pattern?: string;
  /**
   * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or
   * type of information they need to enter.The text appears in an input field until the user puts focus on the
   * field.
   */
  placeholder?: string;
  /**
   * This attribute indicates that the user cannot modify the value of the control. The value of the attribute is
   * irrelevant. If you need read-write access to the input value, do not add the "readonly" attribute.
   */
  readonly?: string;
  /**
   * When present, marks an element that can't be submitted without a value.
   */
  required?: boolean;
  /**
   * The direction in which selection occurred. This is "forward" if the selection was made from left-to-right in an
   * LTR locale or right-to-left in an RTL locale, or "backward" if the selection was made in the opposite direction.
   */
  selectionDirection?: string;
  /**
   * Gets or sets the end position or offset of a text selection.
   */
  selectionEnd?: number;
  /**
   * Gets or sets the starting position or offset of a text selection.
   */
  selectionStart?: number;
  /**
   * The initial size of the control. This value is in pixels unless the value of the type attribute is text or
   * password, in which case it is an integer number of characters. Starting in HTML5, this attribute applies only when
   * the type attribute is set to text, search, tel, url, email, or password, otherwise it is ignored.
   */
  size?: number;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src?: string;
  /**
   * Defines an increment or jump between values that you want to allow the user to enter. When used with the max
   * and min attributes, lets you control the range and increment (for example, allow only even numbers) that the
   * user can enter into an input field.
   */
  step?: string;
  /**
   * Returns the content type of the object.
   */
  type?: string;
  /**
   * Sets or retrieves the width of the object.
   */
  width?: string;
  /**
   * Input checked value.
   *
   * @example
   *
   *   const n = input("", { type: "checked", value: INPUT_VALUE("abc") });
   */
  checked?: AttributeDirective<boolean>;
  /**
   * Input value.
   *
   * @example
   *
   *   const n = input("", { value: INPUT_VALUE("abc") });
   */
  value?: AttributeDirective<string | number>;
}

export declare interface HTMLUnknownElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLLabelElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the object to which the given label object is assigned.
   */
  for?: string;
}

export declare interface HTMLLegendElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLLIElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the value of a list item.
   */
  value?: number;
}

export declare interface HTMLLinkElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  charset?: string;
  disabled?: boolean;
  /**
   * Sets or retrieves a destination URL or an anchor point.
   */
  href?: string;
  /**
   * Sets or retrieves the language code of the object.
   */
  hreflang?: string;
  /**
   * Sets or retrieves the media type.
   */
  media?: string;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  rel?: string;
  /**
   * Sets or retrieves the relationship between the object and the destination of the link.
   */
  rev?: string;
  /**
   * Sets or retrieves the window or frame at which to target content.
   */
  target?: string;
  /**
   * Sets or retrieves the MIME type of the object.
   */
  type?: string;
  integrity?: string;
}

export declare interface HTMLMapElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
}

export declare interface HTMLMediaElementAttrs extends HTMLElementAttrs {
  /**
   * Gets or sets a value that indicates whether to start playing the media automatically.
   */
  autoplay?: boolean;
  /**
   * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the
   * developer does not include controls for the player).
   */
  controls?: boolean;
  crossOrigin?: string;
  /**
   * Gets or sets the current playback position, in seconds.
   */
  currentTime?: number;
  defaultMuted?: boolean;
  /**
   * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio
   * resource.
   */
  defaultPlaybackRate?: number;
  /**
   * Gets or sets a flag to specify whether playback should restart after it completes.
   */
  loop?: boolean;
  /**
   * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
   */
  muted?: boolean;
  /**
   * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of
   * the normal speed of the media resource.
   */
  playbackRate?: number;
  /**
   * Gets or sets the current playback position, in seconds.
   */
  preload?: string;
  readyState?: number;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src?: string;
  /**
   * Gets or sets the volume level for audio portions of the media element.
   */
  volume?: number;
}

export declare interface HTMLMenuElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLMetaElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  charset?: string;
  /**
   * Gets or sets meta-information to associate with httpEquiv or name.
   */
  content?: string;
  /**
   * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response
   * header.
   */
  httpEquiv?: string;
  /**
   * Sets or retrieves the value specified in the content attribute of the meta object.
   */
  name?: string;
  /**
   * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
   */
  scheme?: string;
  /**
   * Sets or retrieves the URL property that will be loaded after the specified time has elapsed.
   */
  url?: string;
}

export declare interface HTMLMeterElementAttrs extends HTMLElementAttrs {
  high?: number;
  low?: number;
  max?: number;
  min?: number;
  optimum?: number;
  value?: number;
}

export declare interface HTMLModElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves reference information about the object.
   */
  cite?: string;
  /**
   * Sets or retrieves the date and time of a modification to the object.
   */
  dateTime?: string;
}

export declare interface HTMLOListElementAttrs extends HTMLElementAttrs {
  /**
   * The starting number.
   */
  start?: number;
}

export declare interface HTMLOptGroupElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the status of an option.
   */
  defaultSelected?: boolean;
  disabled?: boolean;
  /**
   * Sets or retrieves a value that you can use to implement your own label functionality for the object.
   */
  label?: string;
  /**
   * Sets or retrieves whether the option in the list box is the default item.
   */
  selected?: boolean;
  /**
   * Sets or retrieves the value which is returned to the server when the form control is submitted.
   */
  value?: string;
}

export declare interface HTMLOptionElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the status of an option.
   */
  defaultSelected?: boolean;
  disabled?: boolean;
  /**
   * Sets or retrieves a value that you can use to implement your own label functionality for the object.
   */
  label?: string;
  /**
   * Sets or retrieves whether the option in the list box is the default item.
   */
  selected?: boolean;
  /**
   * Sets or retrieves the text string specified by the option tag.
   */
  text?: string;
  /**
   * Sets or retrieves the value which is returned to the server when the form control is submitted.
   */
  value?: string;
}

export declare interface HTMLParagraphElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves how the object is aligned with adjacent text.
   */
  align?: string;
  clear?: string;
}

export declare interface HTMLPictureElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLPreElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or gets a value that you can use to implement your own width functionality for the object.
   */
  width?: number;
}

export declare interface HTMLProgressElementAttrs extends HTMLElementAttrs {
  /**
   * Defines the maximum, or "done" value for a progress element.
   */
  max?: number;
  /**
   * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the
   * max value.
   */
  value?: number;
}

export declare interface HTMLQuoteElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves reference information about the object.
   */
  cite?: string;
}

export declare interface HTMLScriptElementAttrs extends HTMLElementAttrs {
  async?: boolean;
  /**
   * Sets or retrieves the character set used to encode the object.
   */
  charset?: string;
  /**
   * Sets or retrieves the status of the script.
   */
  defer?: boolean;
  /**
   * Sets or retrieves the event for which the script is written.
   */
  event?: string;
  /**
   * Sets or retrieves the object that is bound to the event script.
   */
  for?: string;
  /**
   * Retrieves the URL to an external file that contains the source code or data.
   */
  src?: string;
  /**
   * Retrieves or sets the text of the object as a string.
   */
  text?: string;
  /**
   * Sets or retrieves the MIME type for the associated scripting engine.
   */
  type?: string;
  integrity?: string;
}

export declare interface HTMLSelectElementAttrs extends HTMLElementAttrs {
  disabled?: boolean;
  /**
   * Sets or retrieves the number of objects in a collection.
   */
  length?: number;
  /**
   * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
   */
  multiple?: boolean;
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
  /**
   * When present, marks an element that can't be submitted without a value.
   */
  required?: boolean;
  /**
   * Sets or retrieves the index of the selected option in a select object.
   */
  selectedIndex?: number;
  /**
   * Sets or retrieves the number of rows in the list box.
   */
  size?: number;
  /**
   * Sets or retrieves the value which is returned to the server when the form control is submitted.
   */
  value?: string;
}

export declare interface HTMLSourceElementAttrs extends HTMLElementAttrs {
  /**
   * Gets or sets the intended media type of the media source.
   */
  media?: string;
  sizes?: string;
  /**
   * The address or URL of the a media resource that is to be considered.
   */
  src?: string;
  srcset?: string;
  /**
   * Gets or sets the MIME type of a media resource.
   */
  type?: string;
}

export declare interface HTMLSpanElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLStyleElementAttrs extends HTMLElementAttrs {
  disabled?: boolean;
  /**
   * Sets or retrieves the media type.
   */
  media?: string;
  /**
   * Retrieves the CSS language in which the style sheet is written.
   */
  type?: string;
}

export declare interface HTMLTableCaptionElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the alignment of the caption or legend.
   */
  align?: string;
  /**
   * Sets or retrieves whether the caption appears at the top or bottom of the table.
   */
  vAlign?: string;
}

export declare interface HTMLTableCellElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the number columns in the table that the object should span.
   */
  colspan?: number;
  /**
   * Sets or retrieves a list of header cells that provide information for the object.
   */
  headers?: string;
  /**
   * Sets or retrieves the height of the object.
   */
  height?: any;
  /**
   * Sets or retrieves how many rows in a table the cell should span.
   */
  rowSpan?: number;
  /**
   * Sets or retrieves the width of the object.
   */
  width?: string;
}

export declare interface HTMLTableColElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the number of columns in the group.
   */
  span?: number;
  /**
   * Sets or retrieves the width of the object.
   */
  width?: any;
}

export declare interface HTMLTableDataCellElementAttrs extends HTMLTableCellElementAttrs {
}

export declare interface HTMLTableElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the height of the object.
   */
  height?: any;
  /**
   * Sets or retrieves the width of the object.
   */
  width?: string;
}

export declare interface HTMLTableHeaderCellElementAttrs extends HTMLTableCellElementAttrs {
}

export declare interface HTMLTableRowElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLTableSectionElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLTemplateElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLTextAreaElementAttrs extends HTMLElementAttrs {
  /**
   * Sets or retrieves the width of the object.
   */
  cols?: number;
  /**
   * Sets or retrieves the initial contents of the object.
   */
  defaultValue?: string;
  disabled?: boolean;
  /**
   * Sets or retrieves the maximum number of characters that the user can enter in a text control.
   */
  maxLength?: number;
  /**
   * Sets or retrieves the minimum number of characters that the user can enter in a text control.
   */
  minlength?: number;
  /**
   * Sets or retrieves the name of the object.
   */
  name?: string;
  /**
   * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or
   * type of information they need to enter.The text appears in an input field until the user puts focus on the
   * field.
   */
  placeholder?: string;
  /**
   * Sets or retrieves the value indicated whether the content of the object is read-only.
   */
  readonly?: string;
  /**
   * When present, marks an element that can't be submitted without a value.
   */
  required?: boolean;
  /**
   * Sets or retrieves the number of horizontal rows contained in the object.
   */
  rows?: number;
  /**
   * Gets or sets the end position or offset of a text selection.
   */
  selectionEnd?: number;
  /**
   * Gets or sets the starting position or offset of a text selection.
   */
  selectionStart?: number;
  /**
   * Sets or retrieves the value indicating whether the control is selected.
   */
  status?: any;
  /**
   * Sets or retrieves how to handle wordwrapping in the object.
   */
  wrap?: string;
  /**
   * Text area value.
   *
   * @example
   *
   *   const n = textarea("", { value: TEXTAREA_VALUE("abc") });
   */
  value?: AttributeDirective<string | number>;
}

export declare interface HTMLTitleElementAttrs extends HTMLElementAttrs {
  /**
   * Retrieves or sets the text of the object as a string.
   */
  text?: string;
}

export declare interface HTMLTrackElementAttrs extends HTMLElementAttrs {
  default?: boolean;
  kind?: string;
  label?: string;
  src?: string;
  srclang?: string;
}

export declare interface HTMLUListElementAttrs extends HTMLElementAttrs {
}

export declare interface HTMLVideoElementAttrs extends HTMLMediaElementAttrs {
  /**
   * Gets or sets the height of the video element.
   */
  height?: number;
  /**
   * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the
   * video, or another image if no video data is available.
   */
  poster?: string;
  /**
   * Gets or sets the width of the video element.
   */
  width?: number;
}

/* tslint:disable:max-line-length no-empty-interface */
